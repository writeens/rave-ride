{"version":3,"sources":["Split.js","Map.js","Fare.js","Ride.js","App.js","serviceWorker.js","index.js"],"names":["Split","companyCom","this","props","fare","driverCom","split","onTrip","react_default","a","createElement","className","concat","Component","URL","process","Map","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","location","destination","locationObj","destinationObj","distance","locSelect","desSelect","handleLoad","bind","assertThisInitialized","loadMapAPI","handleLocationSelect","handleDestinationSelect","handleDistance","handleChange","lib_default","url","onLoad","autocompleteLocation","google","maps","places","Autocomplete","document","querySelector","options","autocompleteDestination","addListener","setState","addressObject","getPlace","address_components","formatted_address","objectSpread","_this2","_this$state","generateDistance","response","status","rows","elements","alert","value","getDistance","origin","DistanceMatrixService","getDistanceMatrix","origins","destinations","travelMode","evt","preventDefault","persist","defineProperty","target","name","st","type","id","placeholder","onChange","Fare","Math","ceil","fareUpper","fareLower","Ride","generateFare","dist","max","min","floor","random","setTimeout","src_Map_0","src_Fare_0","onClick","disabled","src_Split_0","App","src_Ride_0","Boolean","window","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.99f9d457.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport \"./Split.css\";\r\n\r\nclass Split extends Component {\r\n    render(){\r\n        let companyCom = 0.25 * this.props.fare;\r\n        let driverCom = this.props.fare - companyCom;\r\n        let split = (this.props.onTrip) ?\r\n            <div className=\"loader\">\r\n                <p className=\"loading\"></p>\r\n            </div> :\r\n                <div className=\"Split\">\r\n                    <div className=\"Split-cost\">Fare Cost: {(this.props.fare) ? `NGN ${this.props.fare}` : 0}</div>\r\n                    <div className=\"Split-details\">\r\n                        <div>\r\n                            <p>Company (25%)</p>\r\n                            {(companyCom) ? <p className=\"Split-fee\">{`NGN ${companyCom}`}</p> : \"\"}\r\n                        </div>\r\n                        <div>\r\n                            <p>Driver</p>\r\n                            {(driverCom) ? <p className=\"Split-fee\">{`NGN ${driverCom}`}</p> : \"\"}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n        return(\r\n            <div className=\"Split-header\">\r\n                {split}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Split;","import React, { Component } from 'react'\r\n// Import HTTP request handler\r\n\r\n// Import Map css files\r\nimport \"./Map.css\";\r\n\r\n// Import Script loader\r\nimport Script from \"react-load-script\";\r\n\r\n/*global google*/\r\n\r\nconst URL = `https://maps.googleapis.com/maps/api/js?key=${process.env.REACT_APP_GMAPS_API}&libraries=places`;\r\n\r\nclass Map extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {location: \"\", destination:\"\", locationObj: {}, destinationObj:{}, distance:\"\", locSelect: false, desSelect:false}\r\n\r\n        this.handleLoad = this.handleLoad.bind(this);\r\n        this.loadMapAPI = this.loadMapAPI.bind(this);\r\n        this.handleLocationSelect = this.handleLocationSelect.bind(this);\r\n        this.handleDestinationSelect = this.handleDestinationSelect.bind(this);\r\n        this.handleDistance = this.handleDistance.bind(this);\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n\r\n    // Load MAPS API script\r\n    loadMapAPI(){\r\n        return(\r\n            <Script url={URL} onLoad={this.handleLoad} />\r\n        )\r\n    }\r\n\r\n\r\n    // Handles all API code upon load\r\n    handleLoad(){\r\n        // Declare Options For Autocomplete\r\n        let options;\r\n        \r\n        this.autocompleteLocation = new google.maps.places.Autocomplete(document.querySelector(\"#location\"), options);\r\n        this.autocompleteDestination = new google.maps.places.Autocomplete(document.querySelector(\"#destination\"), options);\r\n\r\n        // Retrieve place information from selected results\r\n        this.autocompleteLocation.addListener(\"place_changed\", this.handleLocationSelect);\r\n        this.autocompleteDestination.addListener(\"place_changed\", this.handleDestinationSelect);\r\n    }\r\n\r\n    //Handles all code relating to selecting a location\r\n    handleLocationSelect(){\r\n        this.setState({locSelect: true})\r\n        //Extract Address Object\r\n        let addressObject = this.autocompleteLocation.getPlace();\r\n        let address = addressObject.address_components;\r\n\r\n        //Check if address is valid\r\n        if(address){\r\n            this.setState({\r\n                location: addressObject.formatted_address,\r\n                locationObj: {...this.state.locationObj, ...addressObject}\r\n            })\r\n        }\r\n    }\r\n\r\n    //Handles all code relating to selecting a destination\r\n    handleDestinationSelect(){\r\n        this.setState({desSelect: true})\r\n        //Extract Address Object\r\n        let addressObject = this.autocompleteDestination.getPlace();\r\n        let address = addressObject.address_components;\r\n\r\n        //Check if address is valid\r\n        if(address){\r\n            this.setState({\r\n                destination: addressObject.formatted_address,\r\n                destinationObj: {...this.state.destinationObj, ...addressObject}\r\n            })\r\n        }\r\n    }\r\n\r\n    //Calculate Distance\r\n    handleDistance(){\r\n        const {locationObj, destinationObj} = this.state;\r\n        \r\n        this.generateDistance = (response, status) => {\r\n            if(status === \"OK\"){\r\n                if(response.rows[0].elements[0].status === \"ZERO_RESULTS\"){\r\n                    alert(\"Are you sure we can get there?\")\r\n                    this.setState({\r\n                        location: \"\",\r\n                        destination: \"\",\r\n                        locationObj:{},\r\n                        destinationObj:{},\r\n                        distance:\"\", \r\n                        locSelect: false, \r\n                        desSelect:false\r\n                    })\r\n                }else {\r\n                    let distance = response.rows[0].elements[0].distance.value;\r\n                    // let duration = response.rows[0].elements[0].duration.text;\r\n                    this.props.getDistance(distance);\r\n                }\r\n            }\r\n        }\r\n\r\n        let origin = locationObj.formatted_address;\r\n        let destination = destinationObj.formatted_address;\r\n        let service = new google.maps.DistanceMatrixService();\r\n        service.getDistanceMatrix({\r\n            origins: [origin],\r\n            destinations: [destination],\r\n            travelMode: \"DRIVING\",\r\n        }, this.generateDistance);\r\n    }\r\n\r\n    // Handles all changes to the input form\r\n    handleChange(evt){\r\n        evt.preventDefault();\r\n        evt.persist();\r\n        this.setState({\r\n            [evt.target.name]: evt.target.value\r\n        })\r\n        if(this.state.location && this.state.locSelect && evt.target.name === \"location\"){\r\n            this.setState(st => ({\r\n                [evt.target.name]: evt.target.value\r\n            }))\r\n        }\r\n        if(this.state.destination && this.state.desSelect && evt.target.name === \"destination\"){\r\n            this.setState(st => ({\r\n                [evt.target.name]: evt.target.value\r\n            }))\r\n        }\r\n    }\r\n\r\n    render(){\r\n        let sendDistance = (this.state.location && this.state.destination) ? this.handleDistance() : null\r\n        return(\r\n            <div>\r\n                {this.loadMapAPI()}\r\n                <form className=\"Map-form\">\r\n                    <div className=\"Map-location\">\r\n                        <label>Location: </label>\r\n                        <input\r\n                            type=\"text\"\r\n                            id=\"location\"\r\n                            name=\"location\"\r\n                            placeholder=\"Where are you?\"\r\n                            value={this.state.location}\r\n                            onChange={this.handleChange}\r\n                        />\r\n                    </div>\r\n                    <div className=\"Map-destination\">\r\n                        <label>Destination: </label>\r\n                        <input\r\n                            type=\"text\"\r\n                            id=\"destination\"\r\n                            name=\"destination\"\r\n                            placeholder=\"Where are you going?\"\r\n                            value={this.state.destination}\r\n                            onChange={this.handleChange}\r\n                        />\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Map;","import React, { Component } from 'react';\r\nimport \"./Fare.css\";\r\n\r\nclass Fare extends Component {\r\n    render(){\r\n        let distance = Math.ceil(((this.props.distance * 60) + 1)/10) * 10\r\n        let fareUpper = (distance + 200) + 500;\r\n        let fareLower = (distance - 200) + 500;\r\n        return(\r\n            <div className=\"Fare\">\r\n                <p className=\"Fare-title\">Fare Estimate</p>\r\n                {(this.props.distance !== 0) ? <p className=\"Fare-fare\">{`NGN ${fareLower}`} - {`NGN ${fareUpper}`}</p> : <p className=\"Fare-fare\">0</p>}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Fare;","import React, { Component } from 'react';\r\nimport Split from \"./Split\";\r\nimport Map from \"./Map\";\r\nimport Fare from \"./Fare\";\r\nimport \"./Ride.css\";\r\n\r\nclass Ride extends Component {\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = { distance:0, fare:\"\", onTrip:false};\r\n        this.getDistance = this.getDistance.bind(this);\r\n        this.generateFare = this.generateFare.bind(this);\r\n    }\r\n\r\n    getDistance(dist){\r\n        const distance = dist/1000;\r\n        this.setState({distance:distance});\r\n    }\r\n\r\n    generateFare(){\r\n        if(this.state.distance){\r\n            this.setState({onTrip: true});\r\n            let distance = Math.ceil(((this.state.distance * 60) + 1)/10) * 10\r\n            let max = (distance + 200) + 500;\r\n            let min = (distance - 200) + 500;\r\n            let fare = Math.floor(Math.random() * (max-min)) + min\r\n            fare = Math.ceil((fare + 1)/10)* 10;\r\n            setTimeout(() => {\r\n                this.setState({fare: fare, onTrip: false})\r\n            },(fare >= 1000) ? 5000 : 3000)\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"Ride\">\r\n                <div className=\"Ride-all\">\r\n                    <div className=\"Ride-map\">\r\n                        <Map getDistance={this.getDistance} />\r\n                    </div>\r\n                    <div className=\"Ride-fare\">\r\n                        <Fare distance={this.state.distance}/>\r\n                    </div>\r\n                    <div className=\"Ride-button\">\r\n                        <button onClick={this.generateFare} disabled={(this.state.onTrip) ? true: false}>{(this.state.onTrip) ? \"Ride In Progress...\" : \"Take Ride\"}</button>\r\n                    </div>\r\n                    <div className=\"Ride-details\">\r\n                        <Split fare={this.state.fare} onTrip={this.state.onTrip}/>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Ride;","import React from 'react';\nimport Ride from \"./Ride\";\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <p className=\"App-title\">Rave Rider</p>\n      <Ride />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}